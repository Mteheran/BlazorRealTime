@using Microsoft.AspNetCore.SignalR.Client
@implements IDisposable
<h2>Welcome to my Chat</h2>
<h5>You are 
   @{
        if (IsConnected)
        {<span class="badge-success">Online</span> }
        else
        { <span class="badge-danger">Offline</span>}
   }
</h5>

<div class="container col-6">
        <div class="form-group">
            <label class="col-form-label">User:</label>
            <input class="form-control" type="text" id="userInput" @bind="@myCurrentMessage.User" />
            <label class="col-form-label">Message:</label>
           <input class="form-control" type="text" id="messageInput" @bind="@myCurrentMessage.Message" />
        </div>
        <div class="form-group">
            <button class="btn-primary" type="button" @onclick="Send" disabled="@(!IsConnected)">Enviar</button>
            <button class="btn-danger" type="button"  @onclick="Disconnect" disabled="@(!IsConnected)">Desconectar</button>
        </div>
        <div style="height:150px; max-height:150px; overflow-y:scroll " >
            <ul class="list-group" id="messagesList">
                @foreach (var message in myMessagesRecieved)
                {
                    <li class="list-group-item">@message.User: @message.Message</li>
                }
            </ul>
        </div>
</div>

@code {

    private HubConnection hubConnection;
    public List<ChatMessage> myMessagesRecieved;
    public ChatMessage myCurrentMessage;

    protected override async Task OnInitializedAsync()
    {
        myCurrentMessage = new ChatMessage();

        myMessagesRecieved = new List<ChatMessage>();

        hubConnection = new HubConnectionBuilder()
                            .WithUrl("http://localhost:5005/chat")
                            .WithAutomaticReconnect()
                            .Build();

        hubConnection.On<ChatMessage>("RecieveMessage", (chatMessage) =>
        {
            myMessagesRecieved.Insert(0, chatMessage);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    async Task Send() {
        await hubConnection.SendAsync("SendMessage", myCurrentMessage);
        myCurrentMessage.Message = "";
        StateHasChanged();
    }

    async Task Disconnect()
    {
        await hubConnection.StopAsync();
        myMessagesRecieved.Insert(0, new ChatMessage() { User ="Host", Message = "You left" });
        StateHasChanged();
    }

    public bool IsConnected =>
    hubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }

}
